library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
library(roxygen2)
library(XQTL)
roxygenise()
library(XQTL)
?loglM2_fm
roxygenise()
library(XQTL)
?loglM2_fm
exp(1)
identity()
identity
identity(4)
?identity
roxygenise()
roxygenise()
library(XQTL)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(XQTL)
roxygenise()
library(XQTL)
roxygenise()
library(XQTL)
setwd("/gpfs/group/dxl46/default/private/renan/gits/XCIR_paper/heritability/data/gwasx")
library(roxygen2)
roxygenise()
setwd("/gpfs/group/dxl46/default/private/renan/gits//XQTL")
roxygenise()
roxygenise()
library(XQTL)
roxygenise()
roxygenise()
library(XQTL)
a <- 1:3
b <- 4:7
-sum(log(a))-sum(log(b))
-sum(log(c(a,b)))
library(roxygen2)
roxygenise()
library(XQTL)
x <- seq(-1, 1, 0.001)
x
x <- seq(-1, 1, 0.01)
x
plot(x, y = 1/x)
plot(x, y = 1/exp(x))
plot(x, y = exp(x)/(1+exp(x)))
plot(x, y = log(1/exp(x)))
plot(x, y = log(1/x))
plot(x, y = sin(/x))
plot(x, y = sin(x))
plot(x, y = x/(1-x))
plot(x, y = 1/x))
plot(x, y = 1/x)
plot(x, y = x2)
plot(x, y = x^2)
plot(x, y = x^3)
plot(x, y = log(x^3))
plot(x, y = log(x^2))
library(RMKdiscrete)
library(roxygen2)
library(XQTL)
roxygenise()
roxygenise()
roxygenise()
library(XQTL)
loglM2NB <- function(pars, dat, finiteonly = TRUE){
# data
outcs <- dat$expression
gts   <- dat$genotype
# # parameters
# bxa0     <- exp(pars[1])
# bxa      <- pars[2]
# bxi0     <- exp(pars[3])
# bxi      <- pars[4]  # 0 in M0
# bxs0     <- exp(pars[5])
# bxs      <- pars[6]  # 0 in M0
# # p are (0,1]
# pa <- exp(pars[7])/(1+exp(pars[7]))
# pi <- exp(pars[8])/(1+exp(pars[8]))
# p0 <- exp(pars[9])/(1+exp(pars[9]))
# parameters
bxs0     <- pars[1]
bxs      <- pars[2]  # 0 in M0
bxa0     <- pars[3]
bxa      <- pars[4]
bxi0     <- pars[5]
bxi      <- pars[6]  # 0 in M0
# p are (0,1]
p0 <- pars[7]
pa <- pars[8]
pi <- pars[9]
ps <- c(p0, pa, pi)
# Add data
mu0 <- exp(bxs0+bxs*gts)
mua <- exp(bxa0+bxa*gts)
mui <- exp(bxi0+bxi*gts)
nu0 <- mu0*p0/(1-p0)
nua <- mua*pa/(1-pa)
nui <- mui*pi/(1-pi)
nus <- c(nu0, nua, nui)
# Fit
logL <- dbinegbin(y = outcs, nu = nus, p = ps, log = T)
print(pars)
if(finiteonly){
ret <- -sum(logL[is.finite(logL)])
} else{
ret <- -sum(logL)
}
return(ret)
}
loglM2NB <- function(pars, dat, finiteonly = TRUE){
# data
outcs <- dat$expression
gts   <- dat$genotype
# # parameters
# bxa0     <- exp(pars[1])
# bxa      <- pars[2]
# bxi0     <- exp(pars[3])
# bxi      <- pars[4]  # 0 in M0
# bxs0     <- exp(pars[5])
# bxs      <- pars[6]  # 0 in M0
# # p are (0,1]
# pa <- exp(pars[7])/(1+exp(pars[7]))
# pi <- exp(pars[8])/(1+exp(pars[8]))
# p0 <- exp(pars[9])/(1+exp(pars[9]))
# parameters
bxs0     <- pars[1]
bxs      <- pars[2]  # 0 in M0
bxa0     <- pars[3]
bxa      <- pars[4]
bxi0     <- pars[5]
bxi      <- pars[6]  # 0 in M0
# p are (0,1]
p0 <- pars[7]
pa <- pars[8]
pi <- pars[9]
ps <- c(p0, pa, pi)
# Add data
mu0 <- exp(bxs0+bxs*gts)
mua <- exp(bxa0+bxa*gts)
mui <- exp(bxi0+bxi*gts)
nu0 <- mu0*p0/(1-p0)
nua <- mua*pa/(1-pa)
nui <- mui*pi/(1-pi)
nus <- c(nu0, nua, nui)
# Fit
logL <- dbinegbin(y = outcs, nu = nus, p = ps, log = T)
print(pars)
if(finiteonly){
ret <- -sum(logL[is.finite(logL)])
} else{
ret <- -sum(logL)
}
return(ret)
}
loglM2NB <- function(pars, dat, finiteonly = TRUE){
# data
outcs <- dat$expression
gts   <- dat$genotype
# # parameters
# bxa0     <- exp(pars[1])
# bxa      <- pars[2]
# bxi0     <- exp(pars[3])
# bxi      <- pars[4]  # 0 in M0
# bxs0     <- exp(pars[5])
# bxs      <- pars[6]  # 0 in M0
# # p are (0,1]
# pa <- exp(pars[7])/(1+exp(pars[7]))
# pi <- exp(pars[8])/(1+exp(pars[8]))
# p0 <- exp(pars[9])/(1+exp(pars[9]))
# parameters
bxs0     <- pars[1]
bxs      <- pars[2]  # 0 in M0
bxa0     <- pars[3]
bxa      <- pars[4]
bxi0     <- pars[5]
bxi      <- pars[6]  # 0 in M0
# p are (0,1]
p0 <- pars[7]
pa <- pars[8]
pi <- pars[9]
ps <- c(p0, pa, pi)
# Add data
mu0 <- exp(bxs0+bxs*gts)
mua <- exp(bxa0+bxa*gts)
mui <- exp(bxi0+bxi*gts)
nu0 <- mu0*p0/(1-p0)
nua <- mua*pa/(1-pa)
nui <- mui*pi/(1-pi)
nus <- c(nu0, nua, nui)
# Fit
logL <- dbinegbin(y = outcs, nu = nus, p = ps, log = T)
print(pars)
if(finiteonly){
ret <- -sum(logL[is.finite(logL)])
} else{
ret <- -sum(logL)
}
return(ret)
}
roxygenise()
roxygenise()
library(XQTL)
